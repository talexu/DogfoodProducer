worker_processes auto;
worker_rlimit_nofile 30000;

pid /opt/vcam/dogfood_producer/current/tmp/pids/nginx.pid;
error_log /opt/vcam/dogfood_producer/current/log/nginx.error.log;

events {
    worker_connections 10240; # increase if you have lots of clients
    multi_accept on;
    accept_mutex on;
    use epoll; # enable for Linux 2.6+
}

http {
    # nginx will find this file in the config directory set at nginx build time
    include mime.types;

    # allow NSC's Client_SourceIP
    underscores_in_headers on;

    # http://comments.gmane.org/gmane.comp.web.nginx.english/30675
    proxy_ignore_client_abort on;

    # fallback in case we can't determine a type
    default_type application/octet-stream;

    log_format vcam_logger '$http_x_forwarded_for, $remote_addr - $remote_user [$time_iso8601], '
    '"$request" $status $body_bytes_sent $upstream_response_time, '
    '"$http_referer" "$http_user_agent"';

    # click tracking!
    access_log /opt/vcam/dogfood_producer/current/log/nginx.access.log vcam_logger buffer=8k;

    # you generally want to serve static files with nginx since neither
    # Unicorn nor Rainbows! is optimized for it at the moment
    sendfile on;

    tcp_nopush on; # off may be better for *some* Comet/long-poll stuff
    tcp_nodelay off; # on may be better for some Comet/long-poll stuff

    # we haven't checked to see if Rack::Deflate on the app server is
    # faster or not than doing compression via nginx.  It's easier
    # to configure it all in one place here for static files and also
    # to disable gzip for clients who don't get gzip/deflate right.
    # There are other other gzip settings that may be needed used to deal with
    # bad clients out there, see http://wiki.nginx.org/NginxHttpGzipModule
    gzip on;
    gzip_http_version 1.0;
    gzip_proxied any;
    gzip_min_length 500;
    gzip_disable "MSIE [1-6]\.";
    gzip_types text/plain text/xml text/css
    text/comma-separated-values text/csv
    text/javascript application/x-javascript application/javascript
    application/json
    application/atom+xml;

    server {
        # enable one of the following if you're on Linux or FreeBSD
        listen 3000 default deferred; # for Linux
        listen 80 deferred; # for Linux
        # listen 80 default accept_filter=httpready; # for FreeBSD

        # If you have IPv6, you'll likely want to have two separate listeners.
        # One on IPv4 only (the default), and another on IPv6 only instead
        # of a single dual-stack listener.  A dual-stack listener will make
        # for ugly IPv4 addresses in $remote_addr (e.g ":ffff:10.0.0.1"
        # instead of just "10.0.0.1") and potentially trigger bugs in
        # some software.
        #listen 1160;

        client_max_body_size 150M;
        server_name _;

        # ~2 seconds is often enough for most folks to parse HTML/CSS and
        # retrieve needed images/icons/frames, connections are cheap in
        # nginx so increasing this is generally safe...
        keepalive_timeout 5;

        # path for static files
        root /opt/vcam/dogfood_producer/current/public;

        # Prefer to serve static files directly from nginx to avoid unnecessary
        # data copies from the application server.
        #
        # try_files directive appeared in in nginx 0.7.27 and has stabilized
        # over time.  Older versions of nginx (e.g. 0.6.x) requires
        # "if (!-f $request_filename)" which was less efficient:
        # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
        try_files $uri/index.html $uri.html $uri @app;

        error_page 411 @app;
        proxy_intercept_errors on;

        location = /apple-app-site-association {
            try_files /apple-app-site-association.json =404;
            add_header Content-disposition "attachment; filename=apple-app-site-association";
            add_header Access-Control-Allow-Origin "*";
        }

        # only check nginx for temp
        location = /healthies/check {
            return 200 'nginx ok';
        }

        location @app {
            # an HTTP header important enough to have its own Wikipedia entry:
            #   http://en.wikipedia.org/wiki/X-Forwarded-For
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # enable this if and only if you use HTTPS, this helps Rack
            # set the proper protocol for doing redirects:
            # proxy_set_header X-Forwarded-Proto https;

            # pass the Host: header from the client right along so redirects
            # can be set properly within the Rack application
            proxy_set_header Host $http_host;

            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;

            # http://rack.rubyforge.org/doc/Rack/Sendfile.html
            proxy_set_header   X-Sendfile-Type     X-Accel-Redirect;
            # proxy_set_header   X-Accel-Mapping     /=/xfiles/;

            # set "proxy_buffering off" *only* for Rainbows! when doing
            # Comet/long-poll/streaming.  It's also safe to set if you're using
            # only serving fast clients with Unicorn + nginx, but not slow
            # clients.  You normally want nginx to buffer responses to slow
            # clients, even with Rails 3.1 streaming because otherwise a slow
            # client can become a bottleneck of Unicorn.
            #
            # The Rack application may also set "X-Accel-Buffering (yes|no)"
            # in the response headers do disable/enable buffering on a
            # per-response basis.
            # proxy_buffering off;

            proxy_pass http://app:3000;
            proxy_read_timeout 600s;
        }
    }

    server {
        # enable one of the following if you're on Linux or FreeBSD
        listen 80; # for Linux
        # listen 80 default accept_filter=httpready; # for FreeBSD

        client_max_body_size 150M;
        server_name openiosm.veervr.tv;

        # ~2 seconds is often enough for most folks to parse HTML/CSS and
        # retrieve needed images/icons/frames, connections are cheap in
        # nginx so increasing this is generally safe...
        keepalive_timeout 5;

        # path for static files
        root /opt/vcam/dogfood_producer/current/public;

        # Prefer to serve static files directly from nginx to avoid unnecessary
        # data copies from the application server.
        #
        # try_files directive appeared in in nginx 0.7.27 and has stabilized
        # over time.  Older versions of nginx (e.g. 0.6.x) requires
        # "if (!-f $request_filename)" which was less efficient:
        # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
        try_files $uri/index.html $uri.html $uri;

        proxy_intercept_errors on;

        location = /apple-app-site-association {
            try_files /apple-app-site-association-majia.json =404;
            add_header Content-disposition "attachment; filename=apple-app-site-association";
            add_header Access-Control-Allow-Origin "*";
        }
    }

    server {
        listen 80;
        server_name localhost;

        access_log off;
        allow 127.0.0.1;
        deny all;

        location /nginx_status {
            stub_status on;
        }
    }
}
